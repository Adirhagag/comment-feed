{"version":3,"sources":["services/commentsService.js","cmps/AddComment.jsx","cmps/CommentPreview.jsx","assets/imgs/loupe.svg","cmps/Filter.jsx","cmps/Comments.jsx","cmps/Feed.jsx","pages/FeedContainer.jsx","App.js","reportWebVitals.js","index.js"],"names":["BASE_URL","commentsService","getComments","addComment","getGravatarUrl","filterBy","a","axios","get","params","res","data","newPost","post","email","AddComment","loadComments","initialComment","message","useState","comment","setComment","textareaRef","useRef","onAddComment","ev","preventDefault","current","focus","onCommentChange","target","name","value","className","onSubmit","onChange","type","placeholder","autoFocus","ref","cols","rows","CommentPreview","gravatarUrl","setGravatarUrl","loadUserGravatar","fetchedGravatarUrl","useEffect","src","alt","Filter","setFilter","filterInput","setFilterInput","searchGlass","Comments","comments","length","map","_id","Feed","setFilterBy","setComments","fetchedComments","txt","FeedContainer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAEMA,EAAW,gDAEJC,EAAkB,CAC7BC,Y,4CACAC,W,4CACAC,e,yFAGF,WAA2BC,GAA3B,eAAAC,EAAA,sEACoBC,IAAMC,IAAIR,EAAU,CAAES,OAAQJ,IADlD,cACQK,EADR,yBAESA,EAAIC,MAFb,4C,kEAKA,WAA0BC,GAA1B,eAAAN,EAAA,sEACoBC,IAAMM,KAAKb,EAAUY,GADzC,cACQF,EADR,yBAESA,EAAIC,MAFb,4C,kEAKA,WAA8BG,GAA9B,eAAAR,EAAA,sEACoBC,IAAMC,IAAN,UAAaR,EAAb,YAAyBc,IAD7C,cACQJ,EADR,yBAESA,EAAIC,MAFb,4C,wCCjBaI,EAAa,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAErBC,EAAiB,CAAEH,MAAO,GAAII,QAAS,IAC7C,EAA8BC,mBAASF,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACMC,EAAcC,iBAAO,MAErBC,EAAY,uCAAG,WAAOC,GAAP,SAAAnB,EAAA,yDACnBmB,EAAGC,iBAEEN,EAAQF,QAHM,uBAIjBI,EAAYK,QAAQC,QAJH,0CAQb3B,EAAgBE,WAAWiB,GARd,OASnBC,EAAWJ,GACXD,IAVmB,2CAAH,sDAaZa,EAAkB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACzBT,EAAW,2BACND,GADK,kBAEPU,EAAOC,KAAOD,EAAOE,UAI1B,OACE,uBAAMC,UAAU,uCAAuCC,SAAUV,EAAjE,UACE,uBACEQ,MAAOZ,EAAQN,MACfqB,SAAUN,EACVE,KAAK,QACLK,KAAK,QACLC,YAAY,QACZC,WAAS,IACX,0BACEN,MAAOZ,EAAQF,QACfiB,SAAUN,EACVU,IAAKjB,EACLS,KAAK,UACLM,YAAY,UACZG,KAAK,KACLC,KAAK,OAEP,gDC5COC,EAAiB,SAAC,GAAiB,IAAftB,EAAc,EAAdA,QAE/B,EAAsCD,mBAAS,IAA/C,mBAAOwB,EAAP,KAAoBC,EAApB,KAEMC,EAAgB,uCAAG,4BAAAvC,EAAA,sEACUL,EAAgBG,eAAegB,EAAQN,OADjD,OACjBgC,EADiB,OAEvBF,EAAeE,GAFQ,2CAAH,qDAStB,OAJAC,qBAAU,WACRF,MACC,IAGD,sBAAKZ,UAAU,uBAAf,UACGU,GAAe,qBAAKV,UAAU,eAAee,IAAKL,EAAaM,IAAI,KACpE,sBAAKhB,UAAU,6CAAf,UACE,oBAAIA,UAAU,QAAd,SAAuBb,EAAQN,QAC/B,mBAAGmB,UAAU,MAAb,SAAoBb,EAAQF,iBCrBrB,MAA0B,kCCG5BgC,EAAS,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAEtB,EAAsChC,mBAAS,IAA/C,mBAAOiC,EAAP,KAAoBC,EAApB,KAUA,OAJAN,qBAAU,WACRI,EAAUC,KACT,CAACA,IAGF,sBAAKnB,UAAU,SAAf,UACE,qBAAKe,IAAKM,EAAaL,IAAI,KAC3B,uBAAOjB,MAAOoB,EAAajB,SAXT,SAAC,GAAgB,IAAdL,EAAa,EAAbA,OACvBuB,EAAevB,EAAOE,QAUgCI,KAAK,OAAOC,YAAY,eCdrEkB,EAAW,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,SAAUL,EAAgB,EAAhBA,UAEnC,OACE,sBAAKlB,UAAU,uBAAf,UACE,cAAC,EAAD,CAAQkB,UAAWA,KACjBK,EAASC,QAAU,6CACpBD,GAAYA,EAASC,OAAS,GAAKD,EAASE,KAAI,SAACtC,GAAD,OAAa,cAAC,EAAD,CAAkCA,QAASA,GAAtBA,EAAQuC,YCLpFC,EAAO,WAElB,IACA,EAAgCzC,mBADR,CAAEL,MAAO,KACjC,mBAAOT,EAAP,KAAiBwD,EAAjB,KACA,EAAgC1C,mBAAS,IAAzC,mBAAOqC,EAAP,KAAiBM,EAAjB,KAEM9C,EAAY,uCAAG,4BAAAV,EAAA,sEACWL,EAAgBC,YAAYG,GADvC,OACb0D,EADa,OAEnBD,EAAYC,GAFO,2CAAH,qDAgBlB,OAJAhB,qBAAU,WACR/B,MACC,CAACX,IAGF,sBAAK4B,UAAU,gCAAf,UACE,cAAC,EAAD,CAAYjB,aAAcA,IAC1B,cAAC,EAAD,CAAUwC,SAAUA,EAAUL,UAdhB,SAACa,GACjBH,EAAY,2BACPxD,GADM,IAETS,MAAOkD,YChBAC,EAAgB,WAC3B,OACE,qBAAKhC,UAAU,kDAAf,SACE,cAAC,EAAD,OCISiC,MARf,WACE,OACE,qBAAKjC,UAAU,MAAf,SACE,cAAC,EAAD,OCOSkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5f4b1d26.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst BASE_URL = 'https://big-panda-feed.herokuapp.com/comments'\n\nexport const commentsService = {\n  getComments,\n  addComment,\n  getGravatarUrl\n}\n\nasync function getComments(filterBy) {\n  const res = await axios.get(BASE_URL, { params: filterBy })\n  return res.data\n}\n\nasync function addComment(newPost) {\n  const res = await axios.post(BASE_URL, newPost)\n  return res.data\n}\n\nasync function getGravatarUrl(email) {\n  const res = await axios.get(`${BASE_URL}/${email}`)\n  return res.data\n}","import React, { useRef, useState } from 'react'\nimport { commentsService } from '../services/commentsService'\n\nexport const AddComment = ({ loadComments }) => {\n\n  const initialComment = { email: '', message: '' }\n  const [comment, setComment] = useState(initialComment)\n  const textareaRef = useRef(null)\n\n  const onAddComment = async (ev) => {\n    ev.preventDefault()\n\n    if (!comment.message) {\n      textareaRef.current.focus()\n      return\n    }\n\n    await commentsService.addComment(comment)\n    setComment(initialComment)\n    loadComments()\n  }\n\n  const onCommentChange = ({ target }) => {\n    setComment({\n      ...comment,\n      [target.name]: target.value\n    })\n  }\n\n  return (\n    <form className=\"add-comment flex column align-center\" onSubmit={onAddComment}>\n      <input\n        value={comment.email}\n        onChange={onCommentChange}\n        name=\"email\"\n        type=\"email\"\n        placeholder=\"Email\"\n        autoFocus />\n      <textarea\n        value={comment.message}\n        onChange={onCommentChange}\n        ref={textareaRef}\n        name=\"message\"\n        placeholder=\"Message\"\n        cols=\"30\"\n        rows=\"10\"\n      ></textarea>\n      <button>Submit</button>\n    </form>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { commentsService } from '../services/commentsService'\n\nexport const CommentPreview = ({ comment }) => {\n\n  const [gravatarUrl, setGravatarUrl] = useState('')\n\n  const loadUserGravatar = async () => {\n    const fetchedGravatarUrl = await commentsService.getGravatarUrl(comment.email)\n    setGravatarUrl(fetchedGravatarUrl)\n  }\n\n  useEffect(() => {\n    loadUserGravatar()\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div className=\"comment-preview flex\">\n      {gravatarUrl && <img className=\"gravatar-img\" src={gravatarUrl} alt=\"\" />}\n      <div className=\"content-wrapper flex column justify-center\">\n        <h1 className=\"email\">{comment.email}</h1>\n        <p className=\"msg\">{comment.message}</p>\n      </div>\n    </div>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/loupe.38d98259.svg\";","import React, { useEffect, useState } from 'react'\nimport searchGlass from '../assets/imgs/loupe.svg'\n\nexport const Filter = ({setFilter}) => {\n\n  const [filterInput, setFilterInput] = useState('')\n\n  const onInputChange = ({ target }) => {\n    setFilterInput(target.value)\n  }\n\n  useEffect(() => {\n    setFilter(filterInput)\n  }, [filterInput]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div className=\"filter\">\n      <img src={searchGlass} alt=\"\" />\n      <input value={filterInput} onChange={onInputChange} type=\"text\" placeholder=\"Filter\" />\n    </div>\n  )\n}\n","import React from 'react'\nimport { CommentPreview } from './CommentPreview'\nimport { Filter } from './Filter'\n\nexport const Comments = ({ comments, setFilter }) => {\n\n  return (\n    <div className=\"comments flex column\">\n      <Filter setFilter={setFilter} />\n      {!comments.length && <div>Loading...</div>}\n      {comments && comments.length > 0 && comments.map((comment) => <CommentPreview key={comment._id} comment={comment} />)}\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { commentsService } from '../services/commentsService'\nimport { AddComment } from './AddComment'\nimport { Comments } from './Comments'\n\nexport const Feed = () => {\n\n  const initialFilterBy = { email: '' }\n  const [filterBy, setFilterBy] = useState(initialFilterBy)\n  const [comments, setComments] = useState([])\n\n  const loadComments = async () => {\n    const fetchedComments = await commentsService.getComments(filterBy)\n    setComments(fetchedComments)\n  }\n\n  const setFilter = (txt) => {\n    setFilterBy({\n      ...filterBy,\n      email: txt\n    })\n  }\n  \n  useEffect(() => {\n    loadComments()\n  }, [filterBy]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div className=\"feed flex column align-center\">\n      <AddComment loadComments={loadComments} />\n      <Comments comments={comments} setFilter={setFilter} />\n    </div>\n  )\n}","import React from 'react'\nimport { Feed } from '../cmps/Feed'\n\nexport const FeedContainer = () => {\n  return (\n    <div className=\"feed-container flex align-center justify-center\">\n      <Feed />\n    </div>\n  )\n}\n","import { FeedContainer } from \"./pages/FeedContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FeedContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/main.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}